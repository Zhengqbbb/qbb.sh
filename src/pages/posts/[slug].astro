---
import Layout from '~/layouts/Base.astro'
import PostPager from '~/components/PostPager.astro'
import Footer from '~/components/Footer.astro'
import { getPostList } from '~/lib/server'

export async function getStaticPaths() {
    const blogEntries = await getPostList()
    return blogEntries.map(post => ({
        params: { slug: post.slug },
        props: { post },
    }))
}

const { post } = Astro.props
const { Content } = await post.render()

---

<Layout {...post.data}>
    <main class="mx-auto mt-10 max-w-[calc(var(--c-content-width)+96px)] w-full bg-c-bg">

        <div class="relative flex flex-col justify-stretch border-b-0 border-t border-neutral-200 px-0 pt-6 md:border-l md:border-r dark:border-neutral-800 md:rd-t lg:px-0 sm:px-5 md:pt-16">
            <div class="absolute left-0 top-0 mt-1 hidden h-full w-px translate-x--1px from-transparent to-c-bg bg-gradient-to-b md:block"></div>
            <div class="absolute right-0 top-0 mt-1 hidden h-full w-px translate-x-1px from-transparent to-c-bg bg-gradient-to-b md:block"></div>
            <div class="mx-auto max-w-$c-content-width w-full md:mb-3 md:px-16">
                <h1 class="text-8 text-c-fg-4 font-600 leading-normal md:text-10">
                    {post.data.title}
                </h1>
                <p class="text-c-fg-1 lt-sm:(my-2 text-sm)" flex="~ items-center gap-2">
                    {
                        post.data.date?.postText
                            ? (<span>{post.data.date?.postText}</span>)
                            : (<span>draft</span>)
                    }
                     <span role="separator"></span>
                    {post.data.readTime} {post.data.lang === 'zh' ? '分钟' : 'min'}
                </p>
            </div>
        </div>

        <article class="prose post mx-auto max-w-$c-content-width md:px-16">
            <Content />
        </article>
    </main>

    <div class="mx-auto my-20 max-w-$c-content-width">
        <hr class="prose after:from-90%!">
        <PostPager prev={post.data.prev} next={post.data.next} />
        <hr class="prose after:from-90%!">
        <Footer />
        <div id="giscus" class="giscus" />
    </div>
</Layout>

<script>
function navigate() {
    if (location.hash) {
        const el = document.querySelector(decodeURIComponent(location.hash))
        if (!el)
            return
        const top = el.getBoundingClientRect().top
        const offset = window.scrollY
        window.scrollTo({
            top: top + offset - 80,
            behavior: 'smooth',
        })
    }
}

function handleAnchors(event: Event) {
    const evt = event as MouseEvent & { target: HTMLElement }
    const link = evt.target.closest('a')

    if (
        !evt.defaultPrevented
        && link
        && evt.button === 0
        && link.target !== '_blank'
        && link.rel !== 'external'
        && !link.download
        && !evt.metaKey
        && !evt.ctrlKey
        && !evt.shiftKey
        && !evt.altKey
    ) {
        const url = new URL(link.href)
        if (url.origin !== window.location.origin)
            return

        evt.preventDefault()
        const { pathname, hash } = url
        if (hash && (!pathname || pathname === location.pathname)) {
            window.history.replaceState({}, '', hash)
            navigate()
        }
        else {
            window.location.href = pathname + hash
        }
    }
}

const content = document.querySelector('.prose.post')
content?.addEventListener('click', handleAnchors, { passive: false })
</script>
